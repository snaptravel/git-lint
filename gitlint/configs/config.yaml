# Regular expression matchers like \d, \w, must be escaped as in \\d, \\w.
# If you need to include a string like '{}' or '{foo}', you need to double the
# braces, as in '{{}}' or '{{foo}}'. See the pylint configuration for an
# example.

# NOTE: filter are regular expressions, and for readability they are broken up
# using '>-' line folding from YAML. This means that between each line a space
# will be added.

# Filepaths that match any of these regular expressions will be ignored.
# Not respected if FILENAME is passed to the git lint CLI. One regex per line.
ignore-regex:
  .*snapshots/.*
  .*migrations/.*

fixers:
  # Python
  isort:
    extensions:
      - .py
    command: isort
    filter: >-
      .*
    installation: "Run pip install isort."

  yapf:
    extensions:
      - .py
    command: yapf
    config: style.yapf
    arguments:
      - --in-place
      - --style={REPO_HOME_FALLBACK_DEFAULT_CONFIGS}/style.yapf
    # Arguments to be configured at runtime.
    dynamic_arguments:
      - --lines={MODIFIED_LINES_RANGE_REPEATED_ARG}
    installation: "Run pip install yapf."

  # Javascript
  eslint:
    extensions:
      - .js
    command: eslint
    arguments:
      - -c
      - "{REPO_HOME}/.eslintrc.js"
      - --ignore-path
      - "{REPO_HOME}/.eslintignore"
      - -- fix
    installation: >-
      Visit https://eslint.org/docs/user-guide/command-line-interface for install instructions.

  # Typescript
  tslint:
    extensions:
      - .ts
      - .tsx
    command: tslint
    config: tslint.json
    arguments:
      - -c
      - "{REPO_HOME_FALLBACK_DEFAULT_CONFIGS}/tslint.json"
      - --fix
    installation: "run npm -g install tslint"


# Suite of linters.
linters:
  # CSS
  # Sample output:
  # /path_to/error.css: line 3, col 2, Warning - Duplicate property 'width'
  # found.
  csslint:
    extensions:
      - .css
    command: csslint
    arguments:
      - "--ignore=ids,box-model,adjoining-classes,qualified-headings,\
         unique-headings,zero-units"
      - --format=compact
    filter: >-
      ^{filename}: line (?P<line>{lines}), col (?P<column>\d+)?,
      (?P<severity>\S+) - (?P<message>.+)
    installation: >-
      Go to https://github.com/stubbornella/csslint/wiki/Command-line-interface
      for installation instructions.

  # Javascript
  # Sample output:
  # /path_to/error.js:1:3: Use '===' to compare with ''.
  eslint:
    extensions:
      - .js
    command: eslint
    arguments:
      - -c
      - "{REPO_HOME}/.eslintrc.js"
      - --ignore-path
      - "{REPO_HOME}/.eslintignore"
    filter: >-
      {filename}:(?P<line>{lines}):(?P<column>\d+): (?P<message>.+)
    installation: >-
      Visit https://eslint.org/docs/user-guide/command-line-interface for install instructions.

  # Typescript
  # Sample output:
  # ERROR: models/request.ts:4:1 - Consecutive blank lines are forbidden
  tslint:
    extensions:
      - .ts
    command: tslint
    config: tslint.json
    filter: >-
      ERROR: .*:(?P<line>\d+):(?P<column>\d+) - (?P<message>.+)
    arguments:
      - -c
      - "{REPO_HOME_FALLBACK_DEFAULT_CONFIGS}/tslint.json"
    installation: "run npm -g install tslint"

  # Python
  pylint:
    extensions:
      - .py
    command: pylint
    config: pylintrc
    arguments:
      - --rcfile={REPO_HOME_FALLBACK_DEFAULT_CONFIGS}/pylintrc
      - --output-format=text
      - >-
        --msg-template={{abspath}}:{{line}}:{{column}}:
        [{{category}}:{{symbol}}] {{obj}}: {{msg}}
      - --reports=n
    filter: >-
      ^{filename}:(?P<line>{lines}):((?P<column>\d+):)?
      \[(?P<severity>.+):(?P<message_id>\S+)\]\s+(:
      )?(?P<message>.+)$
    installation: "Run pip install pylint."

  # JSON
  # Sample output:
  # Expecting property name: line 3 column 5 (char 15)
  json:
    extensions:
      - .json
    command: python
    arguments:
      - -m
      - json.tool
    # enforce that here comes a colon
    filter: >-
      ^(?P<message>[^:]+(?=:
      line \d+ column \d+)|No JSON object could be decoded)(:
      line (?P<line>\d+) column (?P<column>\d+).*)?$
    installation: Nothing else should be required.

  # SHELL scripts
  # Sample output
  # /path_to/error.sh: line 3: syntax error: unexpected end of file
  bash:
    extensions:
      - .sh
    command: bash
    arguments:
      - "-n"
    filter: >-
      {filename}: line (?P<line>{lines}): (?P<message>.+)
    installation: Please install bash in your system.

  # YAML
  yaml:
    extensions:
      - .yaml
      - .yml
    command: yamllint
    arguments:
      - --format
      - parsable
      - --config-data
      - "{{extends: default, rules: {{document-start: disable}}}}"
    # Matches either:
    # - syntax error, on any line
    # - other error, on a modified line only
    filter: >-
      ^{filename}:(?P<line>{lines}|\d+(?=:\d+:
      \[error\] syntax error:)):(?P<column>\d+):
      \[(?P<severity>\S+)\] (?P<message>.+)$
    installation: Run pip install yamllint.
